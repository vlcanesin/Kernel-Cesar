;
;
;******************************************************************************
;
;	* Arq. I (2022/2), Trabalho 2: Kernel para aplicações do Cesar
;
;	Nome: 		Víctor Lucas Rosada Canesin	
;	Matrícula: 	00333676
;
;	--------------------------------------------------------------
;
;	Áreas de memória
;
;	0000 - 7FFF		_KERNEL
;					Área de Kernel
;
;	0100 - 01FF		_VETTAB
;					Tabela com os vetores das funções do kernel
;
;	8000 - FF7F		_APP
;					Área onde será colocado o programa de aplicação.
;					Esse programa vai fazer o acesso aos periféricos e interrupções, através das funções do Kernel.
;
;	FF80 - FFBF 		_IOAREA16
;					Area de perifericos, acessada na base 16 bits
;
;	FFC0 - FFFF		_IOAREA08
;					Area de perifericos, acessada na base 8 bits
;					
;******************************************************************************


_KERNEL:	equ	h0000
_VETTAB:	equ	h0100
_RESET:		equ	_VETTAB+H0100
_STACK:		equ	h7900
_APP:		equ	h8000
_IOAREA16:	equ	hFF80
_IOAREA08:	equ	hFFC0


;
;------------------------------------------------------------------------------
;	Área reservada para os periféricos
;------------------------------------------------------------------------------

; Acesso em 16 bits
		org		_IOAREA16
		daw		[31]
IVET:	dw		0			; Vetor de interrupção

; Acesso em 8 bits
		org		_IOAREA08
		dab		[23]		
TIMDT:	db		0			; Registro de programação do timer
INTS:	db		0			; INTERRUPT STATUS: IP x x x . x x IPStec IPStim
INTE:	db		0			; INTERRUPT ENABLE: IE x x x . x x IEStec IEStim
TECST:	db		0			; Status do teclado
TECDT:	db		0			; Dado do teclado
VISOR:	dab		[36]			; Portas de acesso ao visor

;	
;------------------------------------------------------------------------------
;	Ponto de entrada do RESET do processador
;------------------------------------------------------------------------------
		org		_KERNEL
		jmp		_RESET

;
;------------------------------------------------------------------------------
;	Area do kernel com os vetores das funções do kernel
;------------------------------------------------------------------------------
		org		_VETTAB
		
		dw		kbhit		; WORD	kbhit()
		dw		getchar		; BYTE	getchar()
		dw		putchar		; void	putchar(BYTE c)
		dw		putmsg		; void	putmsg(BYTE *msg)
		dw		timer		; void	timer(WORD tempo, WORD callback)
		dw		volume		; WORD	volume()

		
;	
;------------------------------------------------------------------------------
;	Código de RESET (BOOT) do processador/interrupção
;------------------------------------------------------------------------------
		org		_RESET

		clr INTE			; 1) Desabilitar o sistema de interrupções
	
		mov #_STACK, R6			; 2) Inicializar o stack pointer (SP = R6)

		mov #isr, IVET			; 3.1) Coloca o endereço da subrotina de interrupção em IVET
		clr INTS			; 3.2) Limpa pedidos de interrupção				
			
		clr TEC_BUFFER			; 4) Inicializar as variáveis internas do kernel
		clr VOLUME_AMP
		clr TICK_ENABLE
		
		mov #VISOR,CURSOR
		
		mov #100, TAB_DEZ
		mov #10, TAB_DEZ+2
		mov #1, TAB_DEZ+4
	
		clr TECST			; 5) Inicializar o teclado zerando o byte de estado (TECST)
		mov #_PULSE_TIME, TIMDT		; 6) Inicializar o timer

		mov #_RESET_CLEAR, r5
		jsr r7,ClearDisplay		; 7.1) Limpa o visor
		jsr r7, DisplayVolume		; 7.2) Coloca VOLUME_AMP (000) no visor

		mov #h83, INTE 			; 8) Habilitar interrupções (tanto de teclado como de timer)
		
		jmp		_APP		; 9) Retornar para o programa de aplicação com um desvio para o endereço _APP da memória

;		
;------------------------------------------------------------------------------
; void ClearDisplay(WORD modo)
;------------------------------------------------------------------------------
ClearDisplay:
		mov r0, -(r6)			; Salva valor de R0
		mov #VISOR, r0			; OBS: ClearDisplay também é usada pela putchar()
CD_loop:
		mov #' ',(r0)			; Preenche o visor com ' '
		inc r0

		cmp r5, #_RESET_CLEAR		; Se a função foi chamada no reset do processador,
		beq check_reset			; limpa todo o visor.
						
		cmp r0, #VISOR+30		; Se não, limpa apenas a Área Caracteres
		bne CD_loop
		br ret_CD

check_reset:	tst r0				; OBS: o visor está no fim da memória.
		bne CD_loop								
		
ret_CD:		mov (r6)+, r0			; Devolve o valor de R0
		
		rts 		r7

;		
;------------------------------------------------------------------------------
; void DisplayVolume()
;------------------------------------------------------------------------------

DisplayVolume:
		mov r0, -(r6)			; Salva registradores na pilha		
		mov r1, -(r6)
		mov r2, -(r6)
		mov r3, -(r6)

		mov #HFFFD, r0			; R0 possui a antepenúltima posição do visor
		mov VOLUME_AMP, r1		; R1 possui o valor do volume
		clr r2				; R2 receberá o caractere da posição (R0)
		clr r3				; R3 é um ponteiro para o vetor {100, 10, 1}

		; ----- Encontra dígitos (centenas > dezenas > unidades) ----- ;

sub_fator:	cmp r1, TAB_DEZ(r3)
		blt print_fator
		sub TAB_DEZ(r3), r1		; É contado quantos {100, 10, 1}s cabem no número
		inc r2				; (ou seja, o dígito da centena/dezena/unidade)
		br sub_fator

print_fator:	add #'0', r2			; R2 é convertido em um dígito
		mov r2, (r0)			; e é colocado no visor

		inc r0				; Posição do visor é incrementada para a próxima casa
		clr r2				; Contador é zerado
		add #2, r3			; Ponteiro aponta para próxima posição no vetor
		cmp r3, #6
		bne sub_fator

		; ------------------------------------------------------------ ;

		mov (r6)+, r3
		mov (r6)+, r2
		mov (r6)+, r1
		mov (r6)+, r0			; Devolve os valores originais dos regs.

		rts 		r7

;		
;------------------------------------------------------------------------------
; Interrupt Service Routine (ISR)
;------------------------------------------------------------------------------
isr:
		mov r0, -(r6)			; Salva registradores
		mov r1, -(r6)
		mov r2, -(r6)
		mov r3, -(r6)
		mov r4, -(r6)
		mov r5, -(r6) 

check_tec:	mov INTS, r1	
		and #2, r1			; Verifica se há interrupção de teclado
		beq check_tim
		jsr r7, isr_tec
		and #hFFFD,INTS			; Desliga o bit de interrupção do teclado

check_tim:	mov INTS, r1	
		and #1, r1			; Verifica se há interrupção de timer
		beq return_isr
		jsr r7, isr_tim	
		and #hFFFE,INTS			; Desliga o bit de interrupção do timer

return_isr:	mov (r6)+, r5			; Retorna os registradores da pilha
		mov (r6)+, r4
		mov (r6)+, r3
		mov (r6)+, r2
		mov (r6)+, r1
		mov (r6)+, r0

		rti		


; ***** Rotina de interrupção do TECLADO ***** ;

isr_tec:
		tst TECST
		beq ponte_isr_tec

mais_1:		cmp TECDT, #'+'			; Caractere '+':
		bne menos_1			; Aumenta o volume em 1
		add #1, VOLUME_AMP		; OBS: caracteres especiais NÃO são
		br atualiza_vol			; salvos no buffer

menos_1:	cmp TECDT, #'-'			; Caractere '-':
		bne mais_10			; Diminui o volume em 1
		sub #1, VOLUME_AMP			
		br atualiza_vol	

mais_10:	cmp TECDT, #'.'			; Caractere '.':
		bne menos_10			; Aumenta o volume em 10
		add #10, VOLUME_AMP			
		br atualiza_vol		

menos_10:	cmp TECDT, #','			; Caractere ',':
		bne mais_100			; Diminui o volume em 10
		sub #10, VOLUME_AMP			
		br atualiza_vol

mais_100:	cmp TECDT, #'>'			; Caractere '>':
		bne menos_100			; Aumenta o volume em 100
		add #100, VOLUME_AMP			
		br atualiza_vol		

menos_100:	cmp TECDT, #'<'			; Caractere '<':
		bne salva_buffer		; Diminui o volume em 100
		sub #100, VOLUME_AMP			
		br atualiza_vol	

		; ----- SALVA BUFFER ----- ;

salva_buffer:	mov TECDT, r1			; Lida com a informação em 8 bits
		mov r1, TEC_BUFFER		; Salva a tecla digitada no buffer
		br clr_tec			; Não é necessário atualizar o volume

ponte_isr_tec:  br ret_isr_tec			; Ponte colocada devido ao tamanho da subrotina

		; ------------------------ ;

atualiza_vol:	tst VOLUME_AMP			
		bge volume_max
		mov #0, VOLUME_AMP		; Se volume for negativo, recebe 0
volume_max:	cmp VOLUME_AMP, #1000
		blt display_vol
		mov #999, VOLUME_AMP		; Se volume passar de 1000, recebe 999

display_vol:	jsr r7, DisplayVolume		; Se o volume foi alterado, é mostrado no visor

clr_tec:	clr TECST			; Libera a leitura de novas teclas

ret_isr_tec:	rts 		r7


; ***** Rotina de interrupção do TIMER ***** ;

isr_tim:
		tst TICK_ENABLE	
		beq ret_isr_tim			; Se TICK não estiver habilitado, não faz nada

		sub #_PULSE_TIME, TICK		; Passaram _PULSE_TIME ms desde a última interrupção
		bgt ret_isr_tim			; Se TICK ainda for positivo, não faz nada

		mov CALLBACK, r1
		jsr r7, (r1)			; Se não, pula para a função de CALLBACK
		clr TICK_ENABLE			; TICK é desbilitado
	
ret_isr_tim:	rts 		r7

;		
;------------------------------------------------------------------------------
; WORD	kbhit()
;------------------------------------------------------------------------------
kbhit:
		clr r0
		tst TEC_BUFFER
		bne return_kbhit		; Se há algo no buffer, retorna 0 por R0
		inc r0                      	; Se não, retorna 1 por R0

return_kbhit:	rts		r7

;		
;------------------------------------------------------------------------------
; BYTE	getchar()
;------------------------------------------------------------------------------
getchar:
		jsr r7, kbhit
		tst r0
		bne getchar			; Espera até que uma tecla entre no buffer

		mov TEC_BUFFER, r0		; Salva a tecla do buffer em R0
		clr TEC_BUFFER			; Limpa o buffer
		
		rts		r7

;		
;------------------------------------------------------------------------------
; void	putchar(BYTE c)
;------------------------------------------------------------------------------
putchar:
		
backspace:	cmp r5, #h08			; Caractere Backspace:	
		bne car_ret			; Faz o cursor voltar um caractere,
		cmp CURSOR, #VISOR		; a menos que não esteja na primeira 
		ble ret_putchar			; posição
		dec CURSOR
		br ret_putchar

car_ret:	cmp r5, #h0D			; Caractere Carriage return:
		bne line_feed			; Faz o cursor voltar para a
		mov #VISOR, CURSOR		; primeira posição
		br ret_putchar

line_feed:	cmp r5, #h0A			; Caractere Line feed:
		bne char_bounds			; Limpa o display da Área Caracteres
		mov r5, #_PUTCHAR_CLEAR		; SEM REINICIALIZAR O CURSOR!
		jsr r7, ClearDisplay
		mov #h0A, r5			; Restaura R5
		br ret_putchar
	
char_bounds:	cmp r5, #' '			; Elimina caracteres que não estão
		blt ret_putchar			; entre ' ' (h20) e 'z' (h7A)
		cmp r5, #'z'
		bgt ret_putchar

		cmp CURSOR, #VISOR+30		; Verifica se cursor está em
		beq ret_putchar 		; uma posição válida
	
		mov r0, -(r6)			; Salva R0 na pilha
		
		mov CURSOR, r0
		mov r5, (r0)			; Move o caractere para o cursor
		inc CURSOR			; somente se há espaço
		
		mov (r6)+, r0			; Retira R0 da pilha
	
ret_putchar:	rts		r7

;		
;------------------------------------------------------------------------------
; void	putmsg(BYTE *msg)
;------------------------------------------------------------------------------
putmsg:
		mov r0, -(r6)			; Salva o registradores na pilha
		mov r5, -(r6)			

		mov r5, r0			; R0 recebe o endereço de início da string

loop_msg:	dec r0				; OBS: assumindo que a string está na área de dados,
		mov (r0)+, r5			; ela é lida com operações de 2 bytes
		and #h00FF, r5 			; O byte de cada caractere é colocado em R5

		beq ret_putmsg			; Se o caractere for '\0', o fim da string foi atingido
		jsr r7, putchar			; Se não, coloca o caractere no cursor
		br loop_msg

ret_putmsg:	mov (r6)+, r5 			; Devolve valores originais dos registradores
		mov (r6)+, r0		
	
		rts		r7

;		
;------------------------------------------------------------------------------
; void	timer(WORD tempo, WORD callback)
;------------------------------------------------------------------------------
timer:	
		mov r5, TICK			; TICK recebe temporização
		mov r4, CALLBACK		; CALLBACK recebe o endereço de retorno
		inc TICK_ENABLE			; Contagem de tempo é habilitada

		rts		r7
				
;		
;------------------------------------------------------------------------------
; WORD	volume()
;------------------------------------------------------------------------------
volume:
		mov VOLUME_AMP, r0		; Devolve o volume por R0
		rts		r7

;	
;------------------------------------------------------------------------------
;	 Constantes e variáveis (no final do programa do kernel)
;------------------------------------------------------------------------------

_PULSE_TIME: 	equ	10		; Tamanho do pulso de interrupção do timer

_RESET_CLEAR:	equ	0		; Modos de operação da função ClearDisplay
_PUTCHAR_CLEAR: equ	1		

CURSOR:		dw	0		; Indica a posição do cursor da tela
TEC_BUFFER:	dw	0		; Guarda a última tecla digitada pelo teclado
VOLUME_AMP:	dw	0		; Guarda o volume do "amplificador"
TAB_DEZ:	daw	100, 10, 1	; Fatores utilizados para separar dígitos do volume

TICK:		dw	0		; Variável usada para guardar o tempo de timer()
TICK_ENABLE:	dw	0		; Enable da contagem do tick (ativado em timer())
CALLBACK:	dw	0		; Endereço de retorno da função timer()
	